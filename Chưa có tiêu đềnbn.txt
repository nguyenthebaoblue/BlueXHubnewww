--[[
@author depso (depthso)
@description Grow a Garden auto-farm script (Ä‘Ã£ sá»­a lá»—i)
Game: https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer:WaitForChild("leaderstats")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local ShecklesCount = Leaderstats:WaitForChild("Sheckles")
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// UI Library
local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = "rbxassetid://" .. ReGui.PrefabsId

--// Folders
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local Farms = workspace:WaitForChild("Farm")

--// Colors
local Accent = {
    DarkGreen = Color3.fromRGB(45, 95, 25),
    Green = Color3.fromRGB(69, 142, 40),
    Brown = Color3.fromRGB(43, 33, 13),
}

--// Init GUI
ReGui:Init({
    Prefabs = InsertService:LoadLocalAsset(PrefabsId)
})
ReGui:DefineTheme("GardenTheme", {
    WindowBg = Accent.Brown,
    TitleBarBg = Accent.DarkGreen,
    TitleBarBgActive = Accent.Green,
    ResizeGrab = Accent.DarkGreen,
    FrameBg = Accent.DarkGreen,
    FrameBgActive = Accent.Green,
    CollapsingHeaderBg = Accent.Green,
    ButtonsBg = Accent.Green,
    CheckMark = Accent.Green,
    SliderGrab = Accent.Green,
})

--// Data & Globals
local SeedStock, OwnedSeeds = {}, {}
local HarvestIgnores = { Normal = false, Gold = false, Rainbow = false }
local SelectedSeed, AutoPlantRandom, AutoPlant, AutoHarvest, AutoBuy, SellThreshold
local NoClip, AutoWalk, AutoWalkAllowRandom, AutoWalkMaxWait, AutoSell
local SelectedSeedStock, AutoWalkStatus
local IsSelling = false

--// Utility Functions
local function CreateWindow()
    return ReGui:Window({
        Title = `{GameInfo.Name} | Depso`,
        Theme = "GardenTheme",
        Size = UDim2.fromOffset(300, 200)
    })
end

local function Plant(Position, Seed)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    task.wait(0.3)
end

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm)
    return Farm.Important.Data.Owner.Value
end

local function GetFarm(PlayerName)
    for _, Farm in pairs(GetFarms()) do
        if GetFarmOwner(Farm) == PlayerName then
            return Farm
        end
    end
end

local function SellInventory()
    if IsSelling then return end
    IsSelling = true
    local Char = LocalPlayer.Character
    local PrevCFrame = Char:GetPivot()
    local PrevSheckles = ShecklesCount.Value
    Char:PivotTo(CFrame.new(62, 4, -26))
    while task.wait() do
        if ShecklesCount.Value ~= PrevSheckles then break end
        GameEvents.Sell_Inventory:FireServer()
    end
    Char:PivotTo(PrevCFrame)
    task.wait(0.2)
    IsSelling = false
end

local function BuySeed(Seed)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Seed = SelectedSeedStock.Selected
    local Stock = SeedStock[Seed]
    if not Stock or Stock <= 0 then return end
    for _ = 1, Stock do BuySeed(Seed) end
end

local function GetSeedInfo(Seed)
    local Name = Seed:FindFirstChild("Plant_Name")
    local Count = Seed:FindFirstChild("Numbers")
    if not Name then return end
    return Name.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds)
    for _, Tool in ipairs(Parent:GetChildren()) do
        local Name, Count = GetSeedInfo(Tool)
        if Name then Seeds[Name] = {Count = Count, Tool = Tool} end
    end
end

local function CollectCropsFromParent(Parent, Crops)
    for _, Tool in ipairs(Parent:GetChildren()) do
        if Tool:FindFirstChild("Item_String") then
            table.insert(Crops, Tool)
        end
    end
end

local function GetOwnedSeeds()
    OwnedSeeds = {}
    CollectSeedsFromParent(Backpack, OwnedSeeds)
    CollectSeedsFromParent(LocalPlayer.Character, OwnedSeeds)
    return OwnedSeeds
end

local function GetInvCrops()
    local Crops = {}
    CollectCropsFromParent(Backpack, Crops)
    CollectCropsFromParent(LocalPlayer.Character, Crops)
    return Crops
end

local function GetArea(Base)
    local C = Base:GetPivot()
    local S = Base.Size
    return math.ceil(C.X - S.X/2), math.ceil(C.Z - S.Z/2), math.floor(C.X + S.X/2), math.floor(C.Z + S.Z/2)
end

local function EquipCheck(Tool)
    if Tool.Parent == Backpack then
        LocalPlayer.Character.Humanoid:EquipTool(Tool)
    end
end

-- Farm setup
local MyFarm = GetFarm(LocalPlayer.Name)
local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical
local Dirt = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2 = GetArea(Dirt)

local function GetRandomFarmPoint()
    local FarmLand = PlantLocations:GetChildren()
    local Part = FarmLand[math.random(1, #FarmLand)]
    local X1, Z1, X2, Z2 = GetArea(Part)
    return Vector3.new(math.random(X1, X2), 4, math.random(Z1, Z2))
end

local function AutoPlantLoop()
    local Seed = SelectedSeed.Selected
    local Data = OwnedSeeds[Seed]
    if not Data or Data.Count <= 0 then return end
    EquipCheck(Data.Tool)
    if AutoPlantRandom.Value then
        for _ = 1, Data.Count do
            Plant(GetRandomFarmPoint(), Seed)
        end
        return
    end
    local Planted = 0
    for X = X1, X2 do
        for Z = Z1, Z2 do
            if Planted >= Data.Count then return end
            Plant(Vector3.new(X, 0.13, Z), Seed)
            Planted += 1
        end
    end
end

local function HarvestPlant(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if Prompt and Prompt.Enabled then fireproximityprompt(Prompt) end
end

local function CanHarvest(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    return Prompt and Prompt.Enabled
end

local function CollectHarvestable(Parent, Plants, IgnoreDistance)
    local Pos = LocalPlayer.Character:GetPivot().Position
    for _, Plant in ipairs(Parent:GetChildren()) do
        if Plant:FindFirstChild("Fruits") then
            CollectHarvestable(Plant.Fruits, Plants, IgnoreDistance)
        end
        if not IgnoreDistance and (Pos - Plant:GetPivot().Position).Magnitude > 15 then continue end
        local Var = Plant:FindFirstChild("Variant")
        if Var and HarvestIgnores[Var.Value] then continue end
        if CanHarvest(Plant) then table.insert(Plants, Plant) end
    end
end

local function GetHarvestablePlants(IgnoreDistance)
    local Plants = {}
    CollectHarvestable(PlantsPhysical, Plants, IgnoreDistance)
    return Plants
end

local function HarvestPlants()
    for _, Plant in ipairs(GetHarvestablePlants()) do
        HarvestPlant(Plant)
    end
end

local function AutoSellCheck()
    if AutoSell.Value and #GetInvCrops() >= SellThreshold.Value then
        SellInventory()
    end
end

local function AutoWalkLoop()
    if IsSelling then return end
    local Humanoid = LocalPlayer.Character.Humanoid
    local Plants = GetHarvestablePlants(true)
    if AutoWalkAllowRandom.Value and (#Plants == 0 or math.random(1, 3) == 2) then
        Humanoid:MoveTo(GetRandomFarmPoint())
        AutoWalkStatus.Text = "Random point"
        return
    end
    for _, Plant in ipairs(Plants) do
        Humanoid:MoveTo(Plant:GetPivot().Position)
        AutoWalkStatus.Text = Plant.Name
    end
end

local function NoclipLoop()
    if not NoClip.Value then return end
    for _, Part in pairs(LocalPlayer.Character:GetDescendants()) do
        if Part:IsA("BasePart") then Part.CanCollide = false end
    end
end

local function MakeLoop(Toggle, Func)
    coroutine.wrap(function()
        while task.wait(0.1) do
            if Toggle.Value then Func() end
        end
    end)()
end

local function GetSeedStock(OnlyAvailable)
    local Items = PlayerGui.Seed_Shop:FindFirstChild("Item_Size", true).Parent
    local NewList = {}
    for _, Item in pairs(Items:GetChildren()) do
        local Txt = Item:FindFirstChild("Main_Frame") and Item.Main_Frame.Stock_Text.Text
        local Count = tonumber(Txt and Txt:match("%d+"))
        if OnlyAvailable and Count and Count > 0 then
            NewList[Item.Name] = Count
        end
        SeedStock[Item.Name] = Count
    end
    return OnlyAvailable and NewList or SeedStock
end

local function CreateCheckboxes(Parent, Dict)
    for Key, Val in pairs(Dict) do
        Parent:Checkbox({
            Value = Val,
            Label = Key,
            Callback = function(_, V) Dict[Key] = V end
        })
    end
end

local function StartServices()
    MakeLoop(AutoWalk, function()
        AutoWalkLoop()
        task.wait(math.random(1, AutoWalkMaxWait.Value))
    end)
    MakeLoop(AutoHarvest, HarvestPlants)
    MakeLoop(AutoBuy, BuyAllSelectedSeeds)
    MakeLoop(AutoPlant, AutoPlantLoop)

    while task.wait(1) do
        GetSeedStock()
        GetOwnedSeeds()
    end
end

--// UI Setup
local Window = CreateWindow()

-- Auto-Plant
local PlantNode = Window:TreeNode({Title="Auto-Plant ðŸ¥•"})
SelectedSeed = PlantNode:Combo({Label = "Seed", Selected = "", GetItems = GetSeedStock})
AutoPlant = PlantNode:Checkbox({Value = false, Label = "Enabled"})
AutoPlantRandom = PlantNode:Checkbox({Value = false, Label = "Plant at random points"})
PlantNode:Button({Text = "Plant all", Callback = AutoPlantLoop})

-- Auto-Harvest
local HarvestNode = Window:TreeNode({Title="Auto-Harvest ðŸšœ"})
AutoHarvest = HarvestNode:Checkbox({Value = false, Label = "Enabled"})
HarvestNode:Separator({Text = "Ignores:"})
CreateCheckboxes(HarvestNode, HarvestIgnores)

-- Auto-Buy
local BuyNode = Window:TreeNode({Title="Auto-Buy ðŸ¥•"})
local OnlyShowStock
SelectedSeedStock = BuyNode:Combo({
    Label = "Seed",
    Selected = "",
    GetItems = function() return GetSeedStock(OnlyShowStock and OnlyShowStock.Value) end
})
AutoBuy = BuyNode:Checkbox({Value = false, Label = "Enabled"})
OnlyShowStock = BuyNode:Checkbox({Value = false, Label = "Only list stock"})
BuyNode:Button({Text = "Buy all", Callback = BuyAllSelectedSeeds})

-- Auto-Sell
local SellNode = Window:TreeNode({Title="Auto-Sell ðŸ’°"})
SellNode:Button({Text = "Sell inventory", Callback = SellInventory})
AutoSell = SellNode:Checkbox({Value = false, Label = "Enabled"})
SellThreshold = SellNode:SliderInt({Label = "Crops threshold", Value = 15, Minimum = 1, Maximum = 199})

-- Auto-Walk
local WallNode = Window:TreeNode({Title="Auto-Walk ðŸš¶"})
AutoWalkStatus = WallNode:Label({Text = "None"})
AutoWalk = WallNode:Checkbox({Value = false, Label = "Enabled"})
AutoWalkAllowRandom = WallNode:Checkbox({Value = true, Label = "Allow random points"})
NoClip = WallNode:Checkbox({Value = false, Label = "NoClip"})
AutoWalkMaxWait = WallNode:SliderInt({Label = "Max delay", Value = 10, Minimum = 1, Maximum = 120})

-- Events
RunService.Stepped:Connect(NoclipLoop)
Backpack.ChildAdded:Connect(AutoSellCheck)

-- Start
StartServices()
